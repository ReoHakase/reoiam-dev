import type { MDXComponents } from 'mdx/types';
import { notFound } from 'next/navigation';
import { useMDXComponent } from 'next-contentlayer/hooks';
import type { ComponentPropsWithoutRef, ReactNode } from 'react';
// import { Image } from '@/components/Image/Image';
import { allContentDocuments } from 'contentlayer/generated';
import { css, cx } from 'styled-system/css';
import { flex } from 'styled-system/patterns';

export const generateStaticParams = async () => {
  const params = allContentDocuments.map((post) => ({
    slug: post._raw.flattenedPath.split('/'),
  }));
  console.log(params);
  return params;
};

// Define your custom MDX components.
const mdxComponents: MDXComponents = {
  // Override the default <a> element to use the next/link component.
  // a: ({ href, children }) => <Link href={href as string}>{children}</Link>,
  // Add a custom component.
  // MyComponent: () => <div>Hello World!</div>,
  h1: ({ className, ...props }: ComponentPropsWithoutRef<'h1'>): ReactNode => (
    <h1
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: '5xl',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  h2: ({ className, ...props }: ComponentPropsWithoutRef<'h2'>): ReactNode => (
    <h2
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: '4xl',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  h3: ({ className, ...props }: ComponentPropsWithoutRef<'h3'>): ReactNode => (
    <h3
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: '2xl',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  h4: ({ className, ...props }: ComponentPropsWithoutRef<'h4'>): ReactNode => (
    <h4
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: 'xl',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  h5: ({ className, ...props }: ComponentPropsWithoutRef<'h5'>): ReactNode => (
    <h3
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: 'lg',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  h6: ({ className, ...props }: ComponentPropsWithoutRef<'h6'>): ReactNode => (
    <h6
      className={cx(
        css({
          fontFamily: 'heading',
          fontSize: 'md',
          fontWeight: 'bold',
          lineHeight: '1.5',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  hr: ({ className, ...props }: ComponentPropsWithoutRef<'hr'>): ReactNode => (
    <hr
      className={cx(
        css({
          color: 'keyplate.6',
          w: 'full',
          h: '1px',
          my: '4',
        }),
        className,
      )}
      {...props}
    />
  ),
  strong: ({ className, ...props }: ComponentPropsWithoutRef<'strong'>): ReactNode => (
    <strong
      className={cx(
        css({
          fontWeight: 'bold',
        }),
        className,
      )}
      {...props}
    />
  ),
  em: ({ className, ...props }: ComponentPropsWithoutRef<'em'>): ReactNode => (
    <em
      className={cx(
        css({
          fontStyle: 'italic',
        }),
        className,
      )}
      {...props}
    />
  ),
  del: ({ className, ...props }: ComponentPropsWithoutRef<'del'>): ReactNode => (
    <del
      className={cx(
        css({
          textDecoration: 'line-through',
        }),
        className,
      )}
      {...props}
    />
  ),
  a: ({ className, ...props }: ComponentPropsWithoutRef<'a'>): ReactNode => (
    <a
      className={cx(
        css({
          color: 'info.11',
          textDecoration: 'underline',
        }),
        className,
      )}
      {...props}
    />
  ),
  p: ({ className, ...props }: ComponentPropsWithoutRef<'p'>): ReactNode => (
    <p
      className={cx(
        css({
          my: '1',
        }),
        className,
      )}
      {...props}
    />
  ),
  span: ({ className, ...props }: ComponentPropsWithoutRef<'span'>): ReactNode => (
    <span
      className={cx(
        css({
          '&.katex-display': {
            // For math blocks generated by `rehype-katex`
            overflowX: 'scroll',
            py: '1',
          },
        }),
        className,
      )}
      {...props}
    />
  ),
  blockquote: ({ className, ...props }: ComponentPropsWithoutRef<'blockquote'>): ReactNode => (
    <blockquote
      className={cx(
        css({
          borderLeft: '2px solid',
          borderColor: 'keyplate.9',
          pl: '4',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  div: ({ className, ...props }: ComponentPropsWithoutRef<'div'>): ReactNode => (
    <div
      className={cx(
        css({
          '&.markdown-alert': {
            // For callouts/alerts generated by `rehype-github-alerts`
            borderLeft: '4px solid',
            borderColor: 'keyplate.9',
            bg: 'keyplate.3',
            px: '4',
            py: '2',
            my: '2',
            rounded: 'lg',
            '& > p.markdown-alert-title': {
              display: 'inline-flex',
              flexDirection: 'row',
              justifyItems: 'start',
              alignItems: 'center',
              gap: '2',
              fontWeight: 'bold',
              fontFamily: 'heading',
            },
            '&.markdown-alert-tip': {
              bg: 'success.3',
              borderColor: 'success.9',
              color: 'success.12',
            },
            '&.markdown-alert-warning': {
              bg: 'warning.3',
              borderColor: 'warning.9',
              color: 'warning.12',
            },
            '&.markdown-alert-note': {
              bg: 'info.3',
              borderColor: 'info.9',
              color: 'info.12',
            },
            '&.markdown-alert-important': {
              bg: 'primary.3',
              borderColor: 'primary.9',
              color: 'primary.12',
            },
            '&.markdown-alert-caution': {
              bg: 'danger.3',
              borderColor: 'danger.9',
              color: 'danger.12',
            },
          },
        }),
        className,
      )}
      {...props}
    />
  ),
  ul: ({ className, ...props }: ComponentPropsWithoutRef<'ul'>): ReactNode => (
    <ul
      className={cx(
        css({
          listStyleType: 'disc',
          pl: '4',
          my: '2',
          'li > &': {
            listStyleType: 'circle',
          },
          'li li > &': {
            listStyleType: 'square',
          },
        }),
        className,
      )}
      {...props}
    />
  ),
  ol: ({ className, ...props }: ComponentPropsWithoutRef<'ol'>): ReactNode => (
    <ol
      className={cx(
        css({
          listStyleType: 'decimal',
          pl: '6',
          my: '2',
        }),
        className,
      )}
      {...props}
    />
  ),
  code: ({ className, ...props }: ComponentPropsWithoutRef<'code'>): ReactNode => (
    <code
      className={cx(
        css({
          counterReset: 'line',
          fontFamily: 'code',
          fontSize: '0.875em', // 14px in 16px base
          fontVariantLigatures: 'none',
          'pre > &': {
            // For code blocks
            // Refer: https://rehype-pretty-code.netlify.app/
          },
          ':not(pre) > &': {
            // For inline code
            // Refer: https://rehype-pretty-code.netlify.app/
            bg: 'keyplate.3',
            color: 'keyplate.11',
            rounded: 'sm',
            px: '1',
            py: '0.5',
          },
          '&[data-line-numbers] > [data-line]::before': {
            // For code blocks with line numbers
            // Refer: https://rehype-pretty-code.netlify.app/
            counterIncrement: 'line',
            content: 'counter(line)',
            display: 'inline-block',
            w: '6',
            mr: '3',
            textAlign: 'right',
            color: 'keyplate.10',
          },
          _light: {
            // For light mode syntax highlighting
            // Refer: https://rehype-pretty-code.netlify.app/
            // Code tag itself is not styled with shiki theme unlike the example.
            "&[data-theme*=' '] span": {
              color: 'var(--shiki-light)',
              bg: 'var(--shiki-light-bg)',
            },
          },
          _dark: {
            // For dark mode syntax highlighting
            // Refer: https://rehype-pretty-code.netlify.app/
            // Code tag itself is not styled with shiki theme unlike the example.
            "&[data-theme*=' '] span": {
              color: 'var(--shiki-dark)',
              bg: 'var(--shiki-dark-bg)',
            },
          },
        }),
        className,
      )}
      {...props}
    />
  ),
  pre: ({ className, ...props }: ComponentPropsWithoutRef<'pre'>): ReactNode => (
    <pre
      className={cx(
        css({
          bg: 'keyplate.2',
          color: 'keyplate.11',
          rounded: 'lg',
          border: '1px solid',
          borderColor: 'keyplate.6',
          p: '4',
          my: '2',
          overflowX: 'scroll',
        }),
        className,
      )}
      {...props}
    />
  ),
  table: ({ className, ...props }: ComponentPropsWithoutRef<'table'>): ReactNode => (
    <table
      className={cx(
        css({
          borderCollapse: 'collapse',
          w: 'full',
          my: '4',
          rounded: 'lg',
          border: '1px solid',
          borderColor: 'keyplate.6',
          overflow: 'hidden',
        }),
        className,
      )}
      {...props}
    />
  ),
  thead: ({ className, ...props }: ComponentPropsWithoutRef<'thead'>): ReactNode => (
    <thead
      className={cx(
        css({
          borderBottom: '1px solid',
          borderColor: 'keyplate.6',
          bg: 'keyplate.3',
          fontWeight: 'bold',
        }),
        className,
      )}
      {...props}
    />
  ),
  tbody: ({ className, ...props }: ComponentPropsWithoutRef<'tbody'>): ReactNode => (
    <tbody
      className={cx(
        css({
          borderTop: '1px solid',
          borderBottom: '1px solid',
          borderColor: 'keyplate.6',
        }),
        className,
      )}
      {...props}
    />
  ),
  tr: ({ className, ...props }: ComponentPropsWithoutRef<'tr'>): ReactNode => (
    <tr
      className={cx(
        css({
          borderBottom: '1px solid',
          borderColor: 'keyplate.6',
        }),
        className,
      )}
      {...props}
    />
  ),
  th: ({ className, ...props }: ComponentPropsWithoutRef<'th'>): ReactNode => (
    <th
      className={cx(
        css({
          px: '2',
          py: '1',
        }),
        className,
      )}
      {...props}
    />
  ),
  td: ({ className, ...props }: ComponentPropsWithoutRef<'td'>): ReactNode => (
    <td
      className={cx(
        css({
          px: '2',
          py: '1',
        }),
        className,
      )}
      {...props}
    />
  ),
  img: ({ className, ...props }: ComponentPropsWithoutRef<'img'>): ReactNode => (
    // eslint-disable-next-line jsx-a11y/alt-text
    // <Image
    //   src={src as unknown as string}
    //   className={css({
    //     w: 'full',
    //     h: 'full',
    //     objectFit: 'cover',
    //     bg: 'keyplate.3',
    //   })}
    //   sizes={{
    //     default: '100vw',
    //     md: '75vw',
    //     lg: '50vw',
    //   }}
    //   alt={alt || 'An image'}
    //   width={Number(width)}
    //   height={Number(height)}
    //   title={title}
    //   {...props}
    // />
    <img className={cx(className)} {...props} />
  ),
};

const Document = ({ params }: { params: { slug: string[] } }): ReactNode => {
  // Find the post for the current page.
  const post = allContentDocuments.find(
    (contentDocument) => contentDocument._raw.flattenedPath === params.slug.join('/'),
  );

  // 404 if the post does not exist.
  if (!post) notFound();

  // Parse the MDX file via the useMDXComponent hook.
  const MDXContent = useMDXComponent(post.body.code);

  return (
    <article
      className={flex({
        maxWidth: '800px',
        w: 'full',
        direction: 'column',
        justify: 'start',
        align: 'stretch',
        textAlign: 'start',
        lineHeight: '1.5',
        p: '6',
      })}
    >
      <MDXContent components={mdxComponents} />
    </article>
  );
};

export default Document;
